"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import shutil
import dj_database_url
import cloudinary
import stripe  # noqa: F401

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from env.py if it exists
if os.path.exists("env.py"):
    import env  # noqa: F401

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("The SECRET_KEY environment variable is not set.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False")

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '*.herokuapp.com',
    'mind-embodyy-spirit-92af4b6525c8.herokuapp.com',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'csp',
    'allauth',
    'allauth.account',
    'cloudinary',
    'cloudinary_storage',
    'rest_framework',
    'tailwind',
    # Local apps
    'gallery',
    'newsletter',
    'orders',
    'theme',
    'events',
]

if DEBUG == 'True' or DEBUG is True:
    # Add development-only apps
    INSTALLED_APPS += [
        'django_browser_reload',
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'orders.middleware.RequireJSONForOrdersCreate',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

if DEBUG:
    # Add django_browser_reload middleware only in DEBUG mode
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.debug',
                'orders.context_processors.stripe_keys',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Cloudinary configuration (read from environment)
CLOUDINARY_URL = os.environ.get('CLOUDINARY_URL')

cloudinary.config(
    secure=True  # Forces HTTPS for all Cloudinary URLs
)


CLOUDINARY_DEFAULT_TRANSFORMATIONS = {
    'fetch_format': 'auto',
    'quality': 'auto'
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get("DATABASE_URL")
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'NumericPasswordValidator'
        ),
    },
]

# Authentication backends belong in AUTHENTICATION_BACKENDS, not
# in AUTH_PASSWORD_VALIDATORS. The validators above are Django's built-in
# password validators; auth backends are responsible for authentication.


# Authentication backends (order matters: ModelBackend first, then allauth)
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Stripe settings
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")
STRIPE_PUBLISHABLE_KEY = os.environ.get("STRIPE_PUBLISHABLE_KEY")


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Static files directories to collect from
if DEBUG:
    # Development settings
    STATICFILES_DIRS = [BASE_DIR / 'static']
    TAILWIND_APP_NAME = 'theme'
    NPM_BIN_PATH = 'npm.cmd'
else:
    # Production settings - only include directories that exist and have files
    STATICFILES_DIRS = []
    if (BASE_DIR / 'theme' / 'static').exists():
        STATICFILES_DIRS.append(BASE_DIR / 'theme' / 'static')
    if (BASE_DIR / 'static').exists():
        STATICFILES_DIRS.append(BASE_DIR / 'static')
    TAILWIND_APP_NAME = 'theme'

# WhiteNoise configuration for serving static files in production
STORAGES = {
    "default": {
        "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# WhiteNoise settings
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Detect npm binary path cross-platform. On Windows, npm may be available as
# 'npm.cmd' while on macOS/Linux it's 'npm'. Use shutil.which to pick the
# available executable; fallback to 'npm' for environments where it's on PATH.
_npm_path = shutil.which('npm') or shutil.which('npm.cmd')
# Allow override via NPM_BIN_PATH env var; otherwise use discovered path.
NPM_BIN_PATH = os.environ.get('NPM_BIN_PATH') or _npm_path

# Only fail if npm is required but not available (in DEBUG mode or development)
if DEBUG and not NPM_BIN_PATH:
    raise RuntimeError(
        "NPM executable not found on PATH (checked 'npm' and 'npm.cmd') and "
        "NPM_BIN_PATH env var is not set. Install Node.js/npm or set "
        "NPM_BIN_PATH to the path of the npm executable."
    )


# Views (route names) that the orders JSON-only middleware should enforce.
# By default we enforce JSON on the `orders-create` route. This can be
# overridden in test or deployment settings.
ORDERS_JSON_ONLY_VIEWS = [
    "orders-create",
]

# Redirect users to the previous page after login if possible,
# otherwise to home
LOGIN_REDIRECT_URL = '/'

# Security settings
SECURE_SSL_REDIRECT = True
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Enable report-only mode in development so
# CSP violations are logged but don't break the page
CONTENT_SECURITY_POLICY_REPORT_ONLY = {
    'DIRECTIVES': {
        'default-src': ["'self'", "https:"],
        'script-src': [
            "'self'",
            "'unsafe-inline'",
            "'unsafe-eval'",
            "https://js.stripe.com",
            "https://m.stripe.network",
            "https://m.stripe.com",
            "https://cdn.jsdelivr.net",
            "https://*.stripe.com",
            "https://*.stripe.network",
        ],
        'style-src': [
            "'self'",
            "'unsafe-inline'",
            "'unsafe-hashes'",
            "https://cdn.jsdelivr.net",
            "https://fonts.googleapis.com",
            "https://*.stripe.com",
            "https://*.stripe.network",
        ],
        'img-src': ["'self'", "data:", "https://res.cloudinary.com", "*"],
        'connect-src': [
            "'self'",
            "https://api.stripe.com",
            "https://m.stripe.network",
            "https://*.stripe.com",
            "https://*.stripe.network",
        ],
        'frame-src': [
            "'self'",
            "https://js.stripe.com",
            "https://m.stripe.network",
            "https://m.stripe.com",
            "https://*.stripe.com",
            "https://*.stripe.network",
        ],
        'font-src': [
            "'self'",
            "https://fonts.gstatic.com",
            "https://cdn.jsdelivr.net",
        ],
        'object-src': ["'none'"],
    }
}
